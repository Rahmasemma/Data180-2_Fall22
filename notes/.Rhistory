# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
collapse = TRUE,
comment = "#",
fig.height = 5,
fig.width = 5,
fig.align = "center",
cache = FALSE
)
#install.packages("ggplot2") # only need to install once
library(ggplot2)
data(diamonds, package="ggplot2")
dim(diamonds)
head(diamonds)
plot(diamonds$carat,diamonds$price) # x-variable first in this notation
# or
plot(price~carat, data=diamonds) # an alternative way: this is y against x
theme_set(theme_bw())
library(ggplot2)
ggplot(diamonds, aes(x=carat,y=price)) +
geom_point() +
labs(y = 'price $', x = 'carat value')
ggplot(diamonds, aes(x=cut,y=price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) + geom_point(col = "blue")
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(alpha = 0.2)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(size = 0.2)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(shape = 2,size=0.4)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(size = 0.2) +
geom_smooth()
ggplot(diamonds, aes(carat, price)) + geom_point(size = 0.5) +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price, colour=color)) + geom_point() +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price, colour=depth)) + geom_point() +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price)) + geom_point() +
facet_wrap(~color, ncol=4)
ggplot(diamonds, aes(carat, price)) + geom_point() +
facet_grid(~color, labeller=label_both)
ggplot(diamonds) + geom_point(aes(price, carat))
ggplot(diamonds, aes(depth)) + geom_histogram()
ggplot(diamonds, aes(depth)) + geom_histogram(binwidth=0.2) + xlim(56,67)
ggplot(diamonds, aes(cut, depth)) + geom_boxplot()
ggplot(diamonds, aes(depth)) + geom_histogram(binwidth = 0.2) +
facet_wrap(~cut) + xlim(56, 67)
ggplot(diamonds, aes(depth, fill=cut)) +
geom_histogram(binwidth=0.2,colour="grey50",alpha=.4,position="identity") + xlim(56,67)
#install.packages('maps') # you only need to do this once. maps package includes various maps that we can use.
#install.packages('sf') # you only need to do this once
library(maps)     # Provides latitude and longitude data for various maps
library(sf)
# read the state population data
MainStates <- map_data("state")
#plot all states with ggplot2, using black borders and light blue fill
ggplot() +
geom_polygon( data=MainStates, aes(x=long, y=lat, group=group),
color="black", fill="lightblue" ) +
coord_sf(crs = st_crs(4326)) # projection
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
knitr::opts_chunk$set(echo = TRUE)
#install.packages('mapview)
library(mapview)
library(sf)
#install.packages('mapview)
library(mapview)
library(sf)
library(mapview)
library(sf)
#install.packages('mapview')
library(mapview)
library(sf)
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
map1 <- mapview(states[states$NAME=='Pennsylvania',], col.regions = blues9, layer.name = "PA")
#install.packages('mapview')
library(mapview)
library(sf)
df_states ,- st_read('/Users/rahmasemma/Downloads/us-states/us-states.shp')
#install.packages('mapview')
library(mapview)
library(sf)
df_states <- st_read('/Users/rahmasemma/Downloads/us-states/us-states.shp')
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
map1 <- mapview(states[states$NAME=='Pennsylvania',], col.regions = blues9, layer.name = "PA")
