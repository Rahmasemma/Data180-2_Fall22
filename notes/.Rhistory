# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
collapse = TRUE,
comment = "#",
fig.height = 5,
fig.width = 5,
fig.align = "center",
cache = FALSE
)
#install.packages("ggplot2") # only need to install once
library(ggplot2)
data(diamonds, package="ggplot2")
dim(diamonds)
head(diamonds)
plot(diamonds$carat,diamonds$price) # x-variable first in this notation
# or
plot(price~carat, data=diamonds) # an alternative way: this is y against x
theme_set(theme_bw())
library(ggplot2)
ggplot(diamonds, aes(x=carat,y=price)) +
geom_point() +
labs(y = 'price $', x = 'carat value')
ggplot(diamonds, aes(x=cut,y=price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) + geom_point(col = "blue")
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(alpha = 0.2)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(size = 0.2)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(shape = 2,size=0.4)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(size = 0.2) +
geom_smooth()
ggplot(diamonds, aes(carat, price)) + geom_point(size = 0.5) +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price, colour=color)) + geom_point() +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price, colour=depth)) + geom_point() +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price)) + geom_point() +
facet_wrap(~color, ncol=4)
ggplot(diamonds, aes(carat, price)) + geom_point() +
facet_grid(~color, labeller=label_both)
ggplot(diamonds) + geom_point(aes(price, carat))
ggplot(diamonds, aes(depth)) + geom_histogram()
ggplot(diamonds, aes(depth)) + geom_histogram(binwidth=0.2) + xlim(56,67)
ggplot(diamonds, aes(cut, depth)) + geom_boxplot()
ggplot(diamonds, aes(depth)) + geom_histogram(binwidth = 0.2) +
facet_wrap(~cut) + xlim(56, 67)
ggplot(diamonds, aes(depth, fill=cut)) +
geom_histogram(binwidth=0.2,colour="grey50",alpha=.4,position="identity") + xlim(56,67)
#install.packages('maps') # you only need to do this once. maps package includes various maps that we can use.
#install.packages('sf') # you only need to do this once
library(maps)     # Provides latitude and longitude data for various maps
library(sf)
# read the state population data
MainStates <- map_data("state")
#plot all states with ggplot2, using black borders and light blue fill
ggplot() +
geom_polygon( data=MainStates, aes(x=long, y=lat, group=group),
color="black", fill="lightblue" ) +
coord_sf(crs = st_crs(4326)) # projection
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
knitr::opts_chunk$set(echo = TRUE)
#install.packages('mapview)
library(mapview)
library(sf)
#install.packages('mapview)
library(mapview)
library(sf)
library(mapview)
library(sf)
#install.packages('mapview')
library(mapview)
library(sf)
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
map1 <- mapview(states[states$NAME=='Pennsylvania',], col.regions = blues9, layer.name = "PA")
#install.packages('mapview')
library(mapview)
library(sf)
df_states ,- st_read('/Users/rahmasemma/Downloads/us-states/us-states.shp')
#install.packages('mapview')
library(mapview)
library(sf)
df_states <- st_read('/Users/rahmasemma/Downloads/us-states/us-states.shp')
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
map1 <- mapview(states[states$NAME=='Pennsylvania',], col.regions = blues9, layer.name = "PA")
library(mapview)
library(sf)
states <- st_read('/Users/bilene/Downloads/us-states/us-states.shp')
knitr::opts_chunk$set(echo = TRUE)
load Cars93 in :
library(MASS)
library(dplyr)
#install.packages("tidyverse")
library(MASS)
library(dplyr)
#install.packages("tidyverse")
library(MASS)
library(dpylr)
#install.packages("tidyverse")
library(MASS)
library(dplyr)
install.packages("tidyverse")
library(MASS)
library(dplyr)
data(Cars93)
Cars93 %>% dplyr::select(MPG.city)
select the MPG.city column
#install.packages("tidyverse")
library(MASS)
library(dplyr)
data(Cars93)
Cars93 %>% dplyr::select(MPG.city)
#install.packages("tidyverse")
library(MASS)
library(dplyr)
data(Cars93)
Cars93 %>% filter(Horsepower>120 & Type=="small") %>%
dplyr::select(Manufacture,Model,MPG.city)
#install.packages("tidyverse")
library(MASS)
library(dplyr)
data(Cars93)
Cars93 %>%
filter(Horsepower>120 & Type=="small") %>%
dplyr::select(Manufacture,Model,MPG.city)
#install.packages("tidyverse")
library(MASS)
library(dplyr)
data(Cars93)
dplyr: Cars93 %>% arrange(Cylinders)
install.packages("tidyverse")
library(MASS)
library(dplyr)
data(Cars93)
dplyr: Cars93 %>% arrange(Cylinders)
install.packages("tidyverse")
library(MASS)
library(dplyr)
data(Cars93)
dplyr:: Cars93 %>% arrange(Cylinders)
Cars93 %>% arrange(desc(Cylinders))
Cars93$Horsepower/Cars93$Cylinders
Cars93$Horsepower/Cars93$int(Cylinders)
Cars93$Horsepower/as.numeric(Cars93$Cylinders)
Cars93$HPperCyl <- Cars93$Horsepower/as.numeric(Cars93$Cylinders)
Cars93
Cars93 %>% mutate(HPperCyl = Horsepower / Cylinders)
Cars93 %>% mutate(HPperCyl = Horsepower /as.numeric(Cylinders))
Cars93 <- Cars93 %>% mutate(HPperCyl = Horsepower /as.numeric(Cylinders))
Cars93 <- Cars93 %>% mutate(HPperCyl = Horsepower /as.numeric(Cylinders))
Cars93 %>% head
Cars93 <- Cars93 %>% mutate(HPperCyl = Horsepower /as.numeric(Cylinders))
Cars93 %>% arrange(EngineSize) %>% select(Manufacturer, Model, EngineSize, HPperCyl) %>%
Cars93 <- Cars93 %>% mutate(HPperCyl = Horsepower /as.numeric(Cylinders))
Cars93 %>% arrange(EngineSize) %>% select(Manufacturer, Model, EngineSize, HPperCyl)
library(ggplot2)
Cars93 <- Cars93 %>% mutate(HPperCyl = Horsepower /as.numeric(Cylinders))
Cars93_new %>% arrange(EngineSize) %>% select(Manufacturer, Model, EngineSize, HPperCyl)
library(ggplot2)
Cars93 <- Cars93 %>% mutate(HPperCyl = Horsepower /as.numeric(Cylinders))
Cars93 %>% arrange(EngineSize) %>% select(Manufacturer, Model, EngineSize, HPperCyl)
ggplot(Cars93, aes(x=EngineSize, y=HPperCyl)) + geom_point()
library(ggplot2) # keep in mind you have to install ggplot2 first via install.packages() if it's not installed in your machine
library(MASS)
data(Cars93)
head(Cars93)
install.packages('tidyverse')
library(tidyverse)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city)) + geom_point()
install.packages('tidyverse')
library(tidyverse)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city)) + geom_point()
install.packages("tidyverse")
#install.packages('tidyverse')
library(tidyverse)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city)) + geom_point()
#install.packages('tidyverse')
library(tidyverse)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city)) + geom_point()
library(ggplot2)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city,colour=Type)) + geom_point()
library(ggplot2)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city,colour=Type)) + geom_point()
library(ggplot2)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city,colour=Type)) + geom_point(size=2) + geom_smooth(col= "red",linetype = "dashed")
library(ggplot2)
ggplot(Cars93, aes(x=EngineSize,y=MPG.city,colour=Type)) + geom_point(size=2) + geom_smooth(col= "red",linetype = "dashed")
#install.packages("ggplot2")
library(ggplot2)
ggplot(data=Cars93, aes(x=AirBags, fill=AirBags)) + geom_bar() +labs(x="AirBags",y="Frequency")
#install.packages("ggplot2")
library(ggplot2)
ggplot(data=Cars93, aes(x=AirBags, fill=AirBags)) + geom_bar() +labs(x="AirBags",y="Frequency")
library(ggplot2)
ggplot(data=Cars93, aes(x=Origin, fill = AirBags)) + geom_bar( position = 'dodge') +labs(x="AirBags",y="Frequency",aes(x=AirBags)) # how to make Airbags in the function of Origin?
# install the packages below by uncommenting the lines. You need to do this only once.
#install.packages('ozmaps') # downloads the map needed
#install.packages('sf') # package used to analyze spatial data
library(ozmaps)
library(sf)
au_states <- ozmaps::ozmap_states # read in spatial dataframe object
# Display the data
head(au_states)
library(ggplot2)
ggplot(data=Cars93, aes(x=Origin, fill = AirBags)) + geom_bar( position = 'dodge') +labs(x="AirBags",y="Frequency",aes(x=AirBags)) # how to make Airbags in the function of Origin?
library(mapview)
library(sf)
ggplot(au_states) + geom_sf(data=au_states)
library(mapview)
library(sf)
ggplot(au_states) + geom_sf(data=au_states, aes(fill= NAME))
au_capitals <- tibble::tribble(
~city,           ~lat,     ~lon,
"Sydney",    -33.8688, 151.2093,
"Melbourne", -37.8136, 144.9631,
"Brisbane",  -27.4698, 153.0251,
"Adelaide",  -34.9285, 138.6007,
"Perth",     -31.9505, 115.8605,
"Hobart",    -42.8821, 147.3272,
"Canberra",  -35.2809, 149.1300,
"Darwin",    -12.4634, 130.8456,
)
library(mapview)
library(sf)
ggplot() + geom_sf(data=au_states) + geom_point(aes(x=lon, y=lat), col = "red", size = 2, data=au_capitals)
library(mapview)
library(sf)
ggplot(au_states) + geom_sf(data=au_states)
library(mapview)
library(sf)
ggplot(au_states) + geom_sf(data=au_states, aes(fill= NAME))
library(mapview)
library(sf)
ggplot() + geom_sf(data=au_states) + geom_point(aes(x=lon, y=lat), col = "red", size = 2, data=au_capitals)
library(mapview)
library(sf)
ggplot(au_states) + geom_sf(data=au_states,fill='lightblue') + coord_sf(crs = st_crs(3112)) # aes(x=lat,y=long....?)
library(mapview)
library(sf)
ggplot(au_states) + geom_sf(data=au_states,fill='lightblue') + coord_sf(crs = st_crs(3112)) # aes(x=lat,y=long....?)
#install.packages('mapview') # interactive display
#install.packages("sf")
library(sf)
library(mapview)
#install.packages('mapview') # interactive display
#install.packages("sf")
library(sf)
library(mapview)
mapview(au_states)
mapview(au_states)
capitals_geo <- st_as_sf(au_capitals, coords = c("lon", "lat"))
mapview(au_states) + mapview(capitals_geo, col.regions='red', legend=F)
# Your code goes here
# install the packages below by uncommenting the lines. You need to do this only once.
#install.packages('ozmaps') # downloads the map needed
#install.packages('sf') # package used to analyze spatial data
library(ozmaps)
library(sf)
au_states <- ozmaps::ozmap_states # read in spatial dataframe object
# Display the data
head(au_states)
library(mapview)
library(sf)
ggplot(au_states) + geom_sf(data=au_states)
capitals_geo <- st_as_sf(au_capitals, coords = c("lon", "lat"))
mapview(au_states) + mapview(capitals_geo, col.regions='red', legend=F)
